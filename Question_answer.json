[
    {
        "question": "What is instance?",
        "answer": "What is instance? To get an instance: require(\"uxp\").entrypoints.get(0).get(1).get(2).get(3).get(4).get(5).get(6).get(7).get(8).get(9).get(10).get(11).get(12).get(13).get(14).get(15).get(16).get(17).get(18).get(19).get(20"
    },
    {
        "question": "What is require?",
        "answer": "What is require? To get an instance: require(\"uxp\").entrypoints.get(0).get(1).get(2).get(3).get(4).get(5).get(6).get(7).get(8).get(9).get(10).get(11).get(12).get(13).get(14).get(15).get(16).get(17).get(18).get(19).get(20"
    },
    {
        "question": "What is .entrypoints?",
        "answer": "What is.entrypoints? To get an instance: require(\"uxp\").entrypoints(['entrypoint'])\n\nTo get an instance: require(\"uxp\").entrypoints(['entrypoint']) To get an instance: require(\"uxp\").entrypoints(['entrypoint']) To get an instance: require(\"uxp\").entrypoints(['entrypoint']) To get an instance: require(\"uxp\").entrypoints(['entrypoint']) To get"
    },
    {
        "question": "What is api?",
        "answer": "What is api? API for plugin to add handlers and menu items for entrypoints defined in manifest.json.\n\nAPI for plugin to add handlers and menu items for entrypoints defined in manifest.json. API for plugin to add menu items for entrypoints defined in manifest.json. API for plugin to add menu items for entrypoints defined in manifest.json. API for plugin to add menu items for entrypoints defined in manifest.json. API for plugin to add menu items for entrypoints"
    },
    {
        "question": "What is plugin?",
        "answer": "What is plugin? API for plugin to add handlers and menu items for entrypoints defined in manifest.json.\n\nHow do I add a plugin to my app?\n\nYou can add a plugin to your app by using the plugin.json file.\n\nHow do I add a plugin to my app?\n\nYou can add a plugin to your app by using the plugin.json file.\n\nHow do I add a plugin to my app?\n\nYou can add a"
    },
    {
        "question": "What is handlers?",
        "answer": "What is handlers? API for plugin to add handlers and menu items for entrypoints defined in manifest.json\n\nAPI for plugin to add handlers and menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json"
    },
    {
        "question": "What is menu?",
        "answer": "What is menu? API for plugin to add handlers and menu items for entrypoints defined in manifest.json\n\nAPI for plugin to add handlers and menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json"
    },
    {
        "question": "What is items?",
        "answer": "What is items? API for plugin to add handlers and menu items for entrypoints defined in manifest.json\n\nAPI for plugin to add handlers and menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json"
    },
    {
        "question": "What is entrypoints?",
        "answer": "What is entrypoints? API for plugin to add handlers and menu items for entrypoints defined in manifest.json\n\nAPI for plugin to add handlers and menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest."
    },
    {
        "question": "What is manifest?",
        "answer": "What is manifest? API for plugin to add handlers and menu items for entrypoints defined in manifest.\n\nAPI for plugin to add handlers and menu items for entrypoints defined in manifest. API for plugin to add menu items for entrypoints defined in manifest. API for plugin to add menu items for entrypoints defined in manifest. API for plugin to add menu items for entrypoints defined in manifest. API for plugin to add menu items for entrypoints defined in manifest. API for plugin to add menu"
    },
    {
        "question": "Who is API?",
        "answer": "Who is API? API for plugin to add handlers and menu items for entrypoints defined in manifest.json.\n\nAPI for plugin to add handlers and menu items for entrypoints defined in manifest.json. API for plugin to add menu items for entrypoints defined in manifest.json. API for plugin to add menu items for entrypoints defined in manifest.json. API for plugin to add menu items for entrypoints defined in manifest.json. API for plugin to add menu items for entrypoints"
    },
    {
        "question": "Who is for?",
        "answer": "Who is for? API for plugin to add handlers and menu items for entrypoints defined in manifest.json\n\nAPI for plugin to add handlers and menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json API for plugin to add menu items for entrypoints defined in manifest.json"
    },
    {
        "question": "What is api?",
        "answer": "What is api? This API can only be called once and there after other apis can be used to modify menu items.\n\nHow to use api?\n\nThe api is a simple way to create a menu item.\n\nThe menu item is a list of items that can be used to modify the menu item.\n\nThe menu item can be used to modify the menu item.\n\nThe menu item can be used to modify the menu item.\n\nThe menu item can"
    },
    {
        "question": "What is apis?",
        "answer": "What is apis? This API can only be called once and there after other apis can be used to modify menu items.\n\nThe apis API is used to create a menu item.\n\nThe apis API is used to create a menu item.\n\nThe apis API is used to create a menu item.\n\nThe apis API is used to create a menu item.\n\nThe apis API is used to create a menu item.\n\nThe ap"
    },
    {
        "question": "What is items?",
        "answer": "What is items? This API can only be called once and there after other apis can be used to modify menu items.\n\nThe following example shows how to create a menu item with the following code:\n\nimport { MenuItem } from './menu'; import { MenuItem } from './menu/menu.js'; import { MenuItem } from './menu/menu.js/menu.js.js'; import { MenuItem } from './menu"
    },
    {
        "question": "Who is API?",
        "answer": "Who is API? This API can only be called once and there after other apis can be used to modify menu items.\n\nThis API can only be called once and there after other apis can be used to modify menu items. The API can only be used to modify the menu items.\n\nThe API can only be used to modify the menu items.\n\nThe API can only be used to modify the menu items.\n\nThe API can only be used to modify the menu"
    },
    {
        "question": "Who is can?",
        "answer": "Who is can? This API can only be called once and there after other apis can be used to modify menu items.\n\nThe following example shows how to use the API to modify the menu items of a menu item.\n\nimport {MenuItem} from '@angular/core'; import {MenuItem} from '@angular/core/menu'; import {MenuItem} from '@angular/core/menu/menu'; import {MenuItem} from '@angular/"
    },
    {
        "question": "What is function?",
        "answer": "What is function? The function throws in case of any error in entrypoints data or if its called more than once.\n\nThe function is called with the following arguments:\n\ndata : The data to be returned.\n\n: The data to be returned. data : The data to be returned.\n\n: The data to be returned. data : The data to be returned.\n\n: The data to be returned. data : The data to be returned.\n\n: The"
    },
    {
        "question": "What is case?",
        "answer": "What is case? The function throws in case of any error in entrypoints data or if its called more than once.\n\nThe following example shows how to use the function to create a new instance of the class.\n\nclass Foo { public: Foo(); public: Foo(); public: Foo(); public: Foo(); public: Foo(); public: Foo(); public: Foo(); public: Foo(); public: Foo(); public: Foo(); public: Foo(); public: Foo(); public: Foo"
    },
    {
        "question": "What is error?",
        "answer": "What is error? The function throws in case of any error in entrypoints data or if its called more than once.\n\nThe function throws in case of any error in entrypoints data or if its called more than once. The function returns a value of type Error.\n\n. The function returns a value of type Error. The function returns a value of type Error.\n\n. The function returns a value of type. The function returns a value of type.\n\n. The function"
    },
    {
        "question": "What is entrypoints?",
        "answer": "What is entrypoints? The function throws in case of any error in entrypoints data or if its called more than once.\n\nThe following example shows how to use the following functions to create a new entrypoint:\n\nfunction createEntrypoint(entrypoint) { var entrypoints = []; for (var i = 0; i < entrypoints.length; i++) { entrypoints[i].push(entrypoints[i]); } }\n\nThe following example shows how to create"
    },
    {
        "question": "What is data?",
        "answer": "What is data? The function throws in case of any error in entrypoints data or if its called more than once.\n\nThe function throws in case of any error in entrypoints data or if its called more than once. The function returns a list of all entries in the database.\n\nThe function returns a list of all entries in the database. The function returns a list of all entries in the database. The function returns a list of all entries in the database. The function returns a"
    },
    {
        "question": "What is param?",
        "answer": "What is param? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- | ---"
    },
    {
        "question": "What is |?",
        "answer": "What is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. The 'plugin' object is the plugin that is used to run the plugin. The 'commands' object is the commands that are used to run the plugin. The 'plugin' object is the plugin that is used to run the command. The 'commands' object"
    },
    {
        "question": "What is type?",
        "answer": "What is type? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- | ---"
    },
    {
        "question": "What is |?",
        "answer": "What is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. The 'plugin' object is the plugin that is used to run the plugin. The 'commands' object is the commands that are used to run the plugin. The 'plugin' object is the plugin that is used to run the command. The 'commands' object"
    },
    {
        "question": "What is description?",
        "answer": "What is description? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- | ---"
    },
    {
        "question": "What is |?",
        "answer": "What is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. The 'plugin' object is the plugin that is used to run the plugin. The 'commands' object is the commands that are used to run the plugin. The 'plugin' object is the plugin that is used to run the command. The 'commands' object"
    },
    {
        "question": "What is |?",
        "answer": "What is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. The 'plugin' object is the plugin that is used to run the plugin. The 'commands' object is the commands that are used to run the plugin. The 'plugin' object is the plugin that is used to run the command. The 'commands' object"
    },
    {
        "question": "What is |?",
        "answer": "What is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. The 'plugin' object is the plugin that is used to run the plugin. The 'commands' object is the commands that are used to run the plugin. The 'plugin' object is the plugin that is used to run the command. The 'commands' object"
    },
    {
        "question": "What is |?",
        "answer": "What is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. The 'plugin' object is the plugin that is used to run the plugin. The 'commands' object is the commands that are used to run the plugin. The 'plugin' object is the plugin that is used to run the command. The 'commands' object"
    },
    {
        "question": "What is |?",
        "answer": "What is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. The 'plugin' object is the plugin that is used to run the plugin. The 'commands' object is the commands that are used to run the plugin. The 'plugin' object is the plugin that is used to run the command. The 'commands' object"
    },
    {
        "question": "What is entrypoints?",
        "answer": "What is entrypoints? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- |"
    },
    {
        "question": "What is object?",
        "answer": "What is object? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- | ---"
    },
    {
        "question": "What is objects?",
        "answer": "What is objects? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. | Param | Type | Description |\n| --- | --- | ---"
    },
    {
        "question": "What is 'plugin?",
        "answer": "What is 'plugin? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n| --- | --- | --- | --- |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |"
    },
    {
        "question": "What is 'panels?",
        "answer": "What is 'panels? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n| --- | --- | --- | --- |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---"
    },
    {
        "question": "What is 'commands?",
        "answer": "What is 'commands? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n'plugin' is a list of commands that are used to create a plugin. 'panels' is a list of commands that are used to create a panel. 'commands' is a list of commands that are used to create a panel. 'comm"
    },
    {
        "question": "Who is Param?",
        "answer": "Who is Param? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n| --- | --- | --- | --- |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n| --- | --- | --- | --- |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---"
    },
    {
        "question": "Who is Type?",
        "answer": "Who is Type? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n| --- | --- | --- | --- |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n| --- | --- | --- | --- |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---"
    },
    {
        "question": "Who is Description?",
        "answer": "Who is Description? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n| --- | --- | --- | --- |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n| --- | --- | --- | --- |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n| --- | --- | --- | --- |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---"
    },
    {
        "question": "Who is --?",
        "answer": "Who is --? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'. The 'plugin' object is the plugin that is used to run the plugin. The 'commands' object is the commands that are used to run the plugin. The 'plugin' object is the plugins that are used to run the plugin. The 'plugin' object is"
    },
    {
        "question": "Who is Object?",
        "answer": "Who is Object? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n| --- | --- | --- | --- |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? | Param | Type | Description |\n| --- | --- | --- |\n| entrypoints | Object | it consists of mainly three objects - 'plugin', 'panels' and 'commands'.\n| --- | --- | --- | --- |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.plugin | Object | This can be an object or a function.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is entrypoints.plugin?",
        "answer": "What is entrypoints.plugin? |\n| entrypoints.plugin | Object | This can be an object or a function. |\n| This can be an object or a function. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.plugin | Object | This can be an object or a function.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is object?",
        "answer": "What is object? |\n| entrypoints.plugin | Object | This can be an object or a function. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is object?",
        "answer": "What is object? |\n| entrypoints.plugin | Object | This can be an object or a function. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is function?",
        "answer": "What is function? |\n| entrypoints.plugin | Object | This can be an object or a function. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.plugin | Object | This can be an object or a function.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.plugin?",
        "answer": "Who is entrypoints.plugin? |\n| entrypoints.plugin | Object | This can be an object or a function. |\n| This can be an object or a function. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.plugin | Object | This can be an object or a function.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is Object?",
        "answer": "Who is Object? |\n| entrypoints.plugin | Object | This can be an object or a function.\n\n|\n\n| The following is a list of the objects that are being used in the plugin.\n\n|\n\n| The following is a list of the functions that are being used in the plugin.\n\n|\n\n| The following is a list of the functions that are being used in the plugin.\n\n|\n\n| The following is a list"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.plugin | Object | This can be an object or a function.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is function?",
        "answer": "What is function? If this is a function, it is                                           assumed as the 'create' handler (described below).\n\nThe function is called when the function is called.\n\nThe function is called when the function is called. The function is called when the function is called. The"
    },
    {
        "question": "What is 'create?",
        "answer": "What is 'create? If this is a function, it is                                           assumed as the 'create' handler (described below).\n\nThe 'create' handler is a function that creates a new object. It is called by the 'create' handler when the 'create' function is called."
    },
    {
        "question": "What is handler?",
        "answer": "What is handler? If this is a function, it is                                           assumed as the 'create' handler (described below).\n\nThe 'create' handler is a function that creates a new object. It is called when the 'create' handler is called.\n\nThe 'create' handler"
    },
    {
        "question": "Who is 'create?",
        "answer": "Who is 'create? If this is a function, it is                                           assumed as the 'create' handler (described below).\n\nThe 'create' handler is a function that creates a new object. The 'create' handler is a function that creates a new object. The 'create'"
    },
    {
        "question": "Who is '?",
        "answer": "Who is '? If this is a function, it is                                           assumed as the 'create' handler (described below).\n\nThe 'create' handler is a function that creates a new object from the existing object. The 'create' handler is a function that creates a new object from the"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.plugin.create | function | This is called after plugin is loaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is entrypoints.plugin.create?",
        "answer": "What is entrypoints.plugin.create? |\n| entrypoints.plugin.create | function | This is called after plugin is loaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.plugin.create | function | This is called after plugin is loaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is function?",
        "answer": "What is function? |\n| entrypoints.plugin.create | function | This is called after plugin is loaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.plugin.create | function | This is called after plugin is loaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is plugin?",
        "answer": "What is plugin? |\n| entrypoints.plugin.create | function | This is called after plugin is loaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.plugin.create | function | This is called after plugin is loaded.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.plugin.create?",
        "answer": "Who is entrypoints.plugin.create? |\n| entrypoints.plugin.create | function | This is called after plugin is loaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.plugin.create | function | This is called after plugin is loaded.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is function?",
        "answer": "Who is function? |\n| entrypoints.plugin.create | function | This is called after plugin is loaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is 'this?",
        "answer": "What is 'this? 'this' can be used to access                                         UxpPluginInfo object.\n\nThe 'this' is used to access the 'this' in the 'this' object.\n\nThe 'this' is used to access the 'this' in the 'this' object"
    },
    {
        "question": "What is access?",
        "answer": "What is access? 'this' can be used to access                                         UxpPluginInfo object.\n\nThe 'this' is used to access the 'this' in the 'this' object.\n\nThe 'this' is used to access the 'this' in the 'this' object."
    },
    {
        "question": "What is uxpplugininfo?",
        "answer": "What is uxpplugininfo? 'this' can be used to access                                         UxpPluginInfo object.\n\nThe uxpplugininfo object is used to access                     "
    },
    {
        "question": "What is object?",
        "answer": "What is object? 'this' can be used to access                                         UxpPluginInfo object.\n\nThe object is a list of the objects that are available to the plugin.\n\nThe object is a list of the objects that are available to the plugin. The plugin is a plugin that is used"
    },
    {
        "question": "Who is UxpPluginInfo?",
        "answer": "Who is UxpPluginInfo? 'this' can be used to access                                         UxpPluginInfo object.\n\nThe UxpPluginInfo object is used to access the UxpPluginInfo object.\n\nThe UxpPluginInfo object is used to access the UxpPluginInfo object.\n"
    },
    {
        "question": "Who is object?",
        "answer": "Who is object? 'this' can be used to access                                         UxpPluginInfo object.\n\nThe following code snippet shows how to access the plugin info of the plugin.\n\n<?php namespace App\\Plugin; use App\\Plugin\\PluginInfo; use App\\Plugin\\PluginInfo\\"
    },
    {
        "question": "What is object?",
        "answer": "What is object? If 'plugin' object is defined, 'create' must be defined.\n\nIf 'plugin' object is defined, 'create' must be defined. If 'plugin' object is defined, 'create' must be defined.\n\nIf 'plugin' object is defined, 'create' must be defined. If 'plugin' object is defined, 'create' must be defined.\n\nIf 'plugin' object is defined, 'create' must be defined."
    },
    {
        "question": "What is failure?",
        "answer": "What is failure? To signal failure, throw an exception.\n\nFailure is a common problem in software development. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers."
    },
    {
        "question": "What is exception?",
        "answer": "What is exception? To signal failure, throw an exception.\n\nThe exception is a string that contains the following characters:\n\n-a\n\n-b\n\n-c\n\n-d\n\n-e\n\n-f\n\n-g\n\n-h\n\n-i\n\n-j\n\n-k\n\n-l\n\n-m\n\n-n\n\n-o\n\n-p\n\n-q\n\n-r\n\n-"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.plugin.destroy | function | This is called before plugin is unloaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is entrypoints.plugin.destroy?",
        "answer": "What is entrypoints.plugin.destroy? |\n| entrypoints.plugin.destroy | function | This is called before plugin is unloaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.plugin.destroy | function | This is called before plugin is unloaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is function?",
        "answer": "What is function? |\n| entrypoints.plugin.destroy | function | This is called before plugin is unloaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.plugin.destroy | function | This is called before plugin is unloaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is plugin?",
        "answer": "What is plugin? |\n| entrypoints.plugin.destroy | function | This is called before plugin is unloaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.plugin.destroy | function | This is called before plugin is unloaded.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.plugin.destroy?",
        "answer": "Who is entrypoints.plugin.destroy? |\n| entrypoints.plugin.destroy | function | This is called before plugin is unloaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.plugin.destroy | function | This is called before plugin is unloaded.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is function?",
        "answer": "Who is function? |\n| entrypoints.plugin.destroy | function | This is called before plugin is unloaded. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is 'this?",
        "answer": "What is 'this? 'this' can be used to access                                          UxpPluginInfo object.\n\nThe 'this' is used to access the 'this' in the 'this' object.\n\nThe 'this' is used to access the 'this' in the 'this'"
    },
    {
        "question": "What is access?",
        "answer": "What is access? 'this' can be used to access                                          UxpPluginInfo object.\n\nThe 'this' is used to access the 'this' in the 'this' object.\n\nThe 'this' is used to access the 'this' in the 'this' object"
    },
    {
        "question": "What is uxpplugininfo?",
        "answer": "What is uxpplugininfo? 'this' can be used to access                                          UxpPluginInfo object.\n\nThe uxpplugininfo object is used to access                    "
    },
    {
        "question": "What is object?",
        "answer": "What is object? 'this' can be used to access                                          UxpPluginInfo object.\n\nThe object is a list of the objects that are available to the plugin.\n\nThe object is a list of the objects that are available to the plugin. The plugin is a plugin that is"
    },
    {
        "question": "Who is UxpPluginInfo?",
        "answer": "Who is UxpPluginInfo? 'this' can be used to access                                          UxpPluginInfo object.\n\nThe UxpPluginInfo object is used to access the UxpPluginInfo object.\n\nThe UxpPluginInfo object is used to access the UxpPluginInfo object."
    },
    {
        "question": "Who is object?",
        "answer": "Who is object? 'this' can be used to access                                          UxpPluginInfo object.\n\nThe plugin is a plugin that is used to create a plugin for a specific plugin.\n\nThe plugin is a plugin that is used to create a plugin for a specific plugin. The plugin is"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function.\n\n| | | | | | | | | | | | | | |"
    },
    {
        "question": "What is entrypoints.panels?",
        "answer": "What is entrypoints.panels? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n| This contains a list of key-value pairs where"
    },
    {
        "question": "What is array?",
        "answer": "What is array? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n| entrypoints.panels | Array<object> | This contains a"
    },
    {
        "question": "What is <?",
        "answer": "What is <? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function.\n\n| | | | | | | | | | | | | | |"
    },
    {
        "question": "What is >?",
        "answer": "What is >? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n\n| entrypoints.panels | Array<object> | This contains"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function.\n\n| | | | | | | | | | | | | | |"
    },
    {
        "question": "What is list?",
        "answer": "What is list? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n| entrypoints.panels | Array<object> | This contains a"
    },
    {
        "question": "What is pairs?",
        "answer": "What is pairs? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n| entrypoints.panels | Array<object> | This contains a"
    },
    {
        "question": "What is key?",
        "answer": "What is key? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n| entrypoints.panels | Array<object> | This contains a"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is id?",
        "answer": "What is id? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n| entrypoints.panels | Array<object> | This contains a"
    },
    {
        "question": "What is value?",
        "answer": "What is value? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n| entrypoints.panels | Array<object> | This contains a"
    },
    {
        "question": "What is data?",
        "answer": "What is data? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is type?",
        "answer": "What is type? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n| entrypoints.panels | Array<object> | This contains a"
    },
    {
        "question": "What is object/function?",
        "answer": "What is object/function? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n| entrypoints.panels | Array<object> | This"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function.\n\n| | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.panels?",
        "answer": "Who is entrypoints.panels? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n| This contains a list of key-value pairs where"
    },
    {
        "question": "Who is Array?",
        "answer": "Who is Array? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n\n| entrypoints.panels | Array<object> | This contains"
    },
    {
        "question": "Who is <?",
        "answer": "Who is <? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function.\n\n| | entrypoints.panels | Array<object> | This contains"
    },
    {
        "question": "Who is object?",
        "answer": "Who is object? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n| entrypoints.panels | Array<object> | This contains a"
    },
    {
        "question": "Who is >?",
        "answer": "Who is >? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function. |\n\n| entrypoints.panels | Array<object> | This contains"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function.\n\n| | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is This?",
        "answer": "Who is This? |\n| entrypoints.panels | Array<object> | This contains a list of key-value pairs where each key is a panel id (string) and                               value is the data for the panel whose type can be object/function.\n\n| entrypoints.panels | Array<object> | This contains a"
    },
    {
        "question": "What is function?",
        "answer": "What is function? If a function, it is assumed to be the'show' method (described below).\n\nThe function is defined as follows:\n\nfunction show ( $x, $y, $z ) { $x = $y ; $y = $z ; }\n\nThe function is defined as follows:\n\nfunction show ( $x, $y, $z ) { $x = $y ; $y = $z ; }\n\nThe function"
    },
    {
        "question": "What is 'show?",
        "answer": "What is'show? If a function, it is assumed to be the'show' method (described below).\n\nThe'show' method is used to show the current state of the program.\n\nThe'show' method is used to show the current state of the program. The'show' method is used to show the current state of the program. The'show' method is used to show the current state of the program. The'show' method is used to show"
    },
    {
        "question": "What is method?",
        "answer": "What is method? If a function, it is assumed to be the'show' method (described below).\n\nThe'show' method is used to show the current state of the program.\n\nThe'show' method is used to show the current state of the program. The'show' method is used to show the current state of the program. The'show' method is used to show the current state of the program. The'show' method is used to show the"
    },
    {
        "question": "Who is 'show?",
        "answer": "Who is'show? If a function, it is assumed to be the'show' method (described below).\n\nThe'show' method is used to show the current function.\n\nThe'show' method is used to show the current function. The'show' method is used to show the current function. The'show' method is used to show the current function. The'show' method is used to show the current function. The'show' method is used to"
    },
    {
        "question": "Who is '?",
        "answer": "Who is '? If a function, it is assumed to be the'show' method (described below).\n\nThe'show' method is a function that returns a list of all the functions that are defined in the current scope.\n\nThe'show' method is a function that returns a list of all the functions that are defined in the current scope.\n\nThe'show' method is a function that returns a list of all the functions that are defined in the current scope."
    },
    {
        "question": "What is object?",
        "answer": "What is object? If an object, it can contain following properties but it is must to                               define either of 'create' or'show'.\n\nThe following example shows how to create a new object.\n\nclass Object { public: void create(Object obj) { obj.setAttribute(\"name\", \"name\"); } }\n\nThe"
    },
    {
        "question": "What is properties?",
        "answer": "What is properties? If an object, it can contain following properties but it is must to                               define either of 'create' or'show'.\n\nThe properties of a property are defined by the following syntax:\n\nproperty name property type property name property type property type property type property type property type property type property type property type property type property type"
    },
    {
        "question": "What is 'create?",
        "answer": "What is 'create? If an object, it can contain following properties but it is must to                               define either of 'create' or'show'.\n\n'create' : 'create'\n\n'show' :'show'\n\n'create' : 'create'\n\n'show' :'show'\n\n'create'"
    },
    {
        "question": "Who is 'create?",
        "answer": "Who is 'create? If an object, it can contain following properties but it is must to                               define either of 'create' or'show'.\n\nThe following properties are required for the 'create' property:\n\nproperty name\n\nproperty type\n\nproperty name\n\nproperty type\n\nproperty name\n\nproperty type\n\nproperty"
    },
    {
        "question": "Who is '?",
        "answer": "Who is '? If an object, it can contain following properties but it is must to                               define either of 'create' or'show'.\n\nThe following example shows how to create a new object with the following properties:\n\nclass Object { constructor(name: String, value: String) { this.name = name; } }\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.create | function | This is called when a panel is created. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is entrypoints.panels.create?",
        "answer": "What is entrypoints.panels.create? |\n| entrypoints.panels.create | function | This is called when a panel is created. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.create | function | This is called when a panel is created. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is function?",
        "answer": "What is function? |\n| entrypoints.panels.create | function | This is called when a panel is created. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.create | function | This is called when a panel is created. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? |\n| entrypoints.panels.create | function | This is called when a panel is created. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.create | function | This is called when a panel is created. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.panels.create?",
        "answer": "Who is entrypoints.panels.create? |\n| entrypoints.panels.create | function | This is called when a panel is created. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.create | function | This is called when a panel is created. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is function?",
        "answer": "Who is function? |\n| entrypoints.panels.create | function | This is called when a panel is created. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is 'this?",
        "answer": "What is 'this? 'this' can be used to access                                         UxpPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe"
    },
    {
        "question": "What is access?",
        "answer": "What is access? 'this' can be used to access                                         UxpPanelInfo object.\n\nThe UXPPanelInfo object is a list of the available panels.\n\nThe UXPPanelInfo object is a list of the available panels.\n\nThe UXPPanelInfo object is a"
    },
    {
        "question": "What is uxppanelinfo?",
        "answer": "What is uxppanelinfo? 'this' can be used to access                                         UxpPanelInfo object.\n\nUxppanelInfo object.\n\nUxppanelInfo object.\n\nUxppanelInfo object.\n\nUxppanel"
    },
    {
        "question": "What is object?",
        "answer": "What is object? 'this' can be used to access                                         UxpPanelInfo object.\n\nThe object is a list of objects that can be accessed by the user.\n\nThe object is a list of objects that can be accessed by the user. The object is a list of objects that"
    },
    {
        "question": "Who is UxpPanelInfo?",
        "answer": "Who is UxpPanelInfo? 'this' can be used to access                                         UxpPanelInfo object.\n\nUXPPanelInfo.get( 'this', 'this', 'this', 'this', 'this', 'this', 'this', 'this"
    },
    {
        "question": "Who is object?",
        "answer": "Who is object? 'this' can be used to access                                         UxpPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe U"
    },
    {
        "question": "What is function?",
        "answer": "What is function? This function can return a promise.\n\nfunction getValue () { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis"
    },
    {
        "question": "What is promise?",
        "answer": "What is promise? This function can return a promise.\n\nThe promise is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is"
    },
    {
        "question": "What is failure?",
        "answer": "What is failure? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use the following code to signal failure:\n\nimport { Error } from './error'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import"
    },
    {
        "question": "What is exception?",
        "answer": "What is exception? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use exception handling in a web application.\n\nimport { Exception } from './Exception'; import { Exception } from './Exception/Exception'; import { Exception } from './Exception/Exception.Exception'; import { Exception } from './Exception/Exception.Exception.Exception'; import { Exception } from './Exception/Exception.Exception.Exception'; import {"
    },
    {
        "question": "What is promise?",
        "answer": "What is promise? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use promise to signal failure.\n\nvar promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise ="
    },
    {
        "question": "What is default?",
        "answer": "What is default? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is a very important feature. It is important to note that this is not a bug, it is a feature.\n\nThis is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is"
    },
    {
        "question": "What is timeout?",
        "answer": "What is timeout? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is the default value for the timeout.\n\nThis is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default"
    },
    {
        "question": "What is msec?",
        "answer": "What is msec? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is a bug in the config file.\n\nThis is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug"
    },
    {
        "question": "What is v5?",
        "answer": "What is v5? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nWhat is v6? This has a default Timeout of 300 MSec from manifest v6 onwards.\n\nWhat is v7? This has a default Timeout of 300 MSec from manifest v7 onwards.\n\nWhat is v8? This has a default Timeout of 300 MSec from manifest v8 onwards.\n\nWhat is v9? This has a"
    },
    {
        "question": "What is onwards?",
        "answer": "What is onwards? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds."
    },
    {
        "question": "Who is Timeout?",
        "answer": "Who is Timeout? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis has a default Timeout of 300 MSec from manifest v5 onwards. Timeout is not available for all users.\n\nThis is not available for all users. Timeout is not available for all users.\n\nTimeout is not available for all users.\n\nTimeout is not available for all users.\n\nTimeout is not available for all users."
    },
    {
        "question": "Who is of?",
        "answer": "Who is of? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the"
    },
    {
        "question": "Who is MSec?",
        "answer": "Who is MSec? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis has a default Timeout of 300 MSec from manifest v5 onwards. Timeout of 0.5 seconds.\n\nTimeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of"
    },
    {
        "question": "Who is from?",
        "answer": "Who is from? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nWhat is the default Timeout of 300 MSec?\n\nThe default Timeout of 300 MSec is 0.\n\nWhat is the default Timeout of 300 MSec?\n\nThe default Timeout of 300 MSec is 0.\n\nWhat is the default Timeout of 300 MSec?\n\nThe default Timeout of 300 MSec is 0.\n\n"
    },
    {
        "question": "What is parameters?",
        "answer": "What is parameters? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is create?",
        "answer": "What is create? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is event?",
        "answer": "What is event? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is manifest?",
        "answer": "What is manifest? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is version?",
        "answer": "What is version? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is v4?",
        "answer": "What is v4? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is create?",
        "answer": "What is create? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is rootnode?",
        "answer": "What is rootnode? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is onwards?",
        "answer": "What is onwards? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is entrypoints.panels.show?",
        "answer": "What is entrypoints.panels.show? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is function?",
        "answer": "What is function? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. |"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "Who is Manifest?",
        "answer": "Who is Manifest? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "Who is Version?",
        "answer": "Who is Version? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "Who is V4?",
        "answer": "Who is V4? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "Who is create?",
        "answer": "Who is create? Parameters :                                          create(event) {}, till Manifest Version V4                                          create(rootNode) {}, from v5 onwards |\n| entrypoints.panels.show | function | This is called when a panel is shown. The"
    },
    {
        "question": "What is 'this?",
        "answer": "What is 'this? 'this' can be used to access                                         UxpPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe"
    },
    {
        "question": "What is access?",
        "answer": "What is access? 'this' can be used to access                                         UxpPanelInfo object.\n\nThe UXPPanelInfo object is a list of the available panels.\n\nThe UXPPanelInfo object is a list of the available panels.\n\nThe UXPPanelInfo object is a"
    },
    {
        "question": "What is uxppanelinfo?",
        "answer": "What is uxppanelinfo? 'this' can be used to access                                         UxpPanelInfo object.\n\nUxppanelInfo object.\n\nUxppanelInfo object.\n\nUxppanelInfo object.\n\nUxppanel"
    },
    {
        "question": "What is object?",
        "answer": "What is object? 'this' can be used to access                                         UxpPanelInfo object.\n\nThe object is a list of objects that can be accessed by the user.\n\nThe object is a list of objects that can be accessed by the user. The object is a list of objects that"
    },
    {
        "question": "Who is UxpPanelInfo?",
        "answer": "Who is UxpPanelInfo? 'this' can be used to access                                         UxpPanelInfo object.\n\nUXPPanelInfo.get( 'this', 'this', 'this', 'this', 'this', 'this', 'this', 'this"
    },
    {
        "question": "Who is object?",
        "answer": "Who is object? 'this' can be used to access                                         UxpPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe U"
    },
    {
        "question": "What is function?",
        "answer": "What is function? This function can return a promise.\n\nfunction getValue () { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis"
    },
    {
        "question": "What is promise?",
        "answer": "What is promise? This function can return a promise.\n\nThe promise is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is"
    },
    {
        "question": "What is failure?",
        "answer": "What is failure? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use the following code to signal failure:\n\nimport { Error } from './error'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import"
    },
    {
        "question": "What is exception?",
        "answer": "What is exception? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use exception handling in a web application.\n\nimport { Exception } from './Exception'; import { Exception } from './Exception/Exception'; import { Exception } from './Exception/Exception.Exception'; import { Exception } from './Exception/Exception.Exception.Exception'; import { Exception } from './Exception/Exception.Exception.Exception'; import {"
    },
    {
        "question": "What is promise?",
        "answer": "What is promise? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use promise to signal failure.\n\nvar promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise ="
    },
    {
        "question": "What is default?",
        "answer": "What is default? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is a very important feature. It is important to note that this is not a bug, it is a feature.\n\nThis is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is"
    },
    {
        "question": "What is timeout?",
        "answer": "What is timeout? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is the default value for the timeout.\n\nThis is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default"
    },
    {
        "question": "What is msec?",
        "answer": "What is msec? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is a bug in the config file.\n\nThis is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug"
    },
    {
        "question": "What is v5?",
        "answer": "What is v5? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nWhat is v6? This has a default Timeout of 300 MSec from manifest v6 onwards.\n\nWhat is v7? This has a default Timeout of 300 MSec from manifest v7 onwards.\n\nWhat is v8? This has a default Timeout of 300 MSec from manifest v8 onwards.\n\nWhat is v9? This has a"
    },
    {
        "question": "What is onwards?",
        "answer": "What is onwards? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds."
    },
    {
        "question": "Who is Timeout?",
        "answer": "Who is Timeout? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis has a default Timeout of 300 MSec from manifest v5 onwards. Timeout is not available for all users.\n\nThis is not available for all users. Timeout is not available for all users.\n\nTimeout is not available for all users.\n\nTimeout is not available for all users.\n\nTimeout is not available for all users."
    },
    {
        "question": "Who is of?",
        "answer": "Who is of? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the"
    },
    {
        "question": "Who is MSec?",
        "answer": "Who is MSec? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis has a default Timeout of 300 MSec from manifest v5 onwards. Timeout of 0.5 seconds.\n\nTimeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of"
    },
    {
        "question": "Who is from?",
        "answer": "Who is from? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nWhat is the default Timeout of 300 MSec?\n\nThe default Timeout of 300 MSec is 0.\n\nWhat is the default Timeout of 300 MSec?\n\nThe default Timeout of 300 MSec is 0.\n\nWhat is the default Timeout of 300 MSec?\n\nThe default Timeout of 300 MSec is 0.\n\n"
    },
    {
        "question": "What is parameters?",
        "answer": "What is parameters? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. |"
    },
    {
        "question": "What is show?",
        "answer": "What is show? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "What is event?",
        "answer": "What is event? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "What is manifest?",
        "answer": "What is manifest? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "What is version?",
        "answer": "What is version? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "What is v4?",
        "answer": "What is v4? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "What is show?",
        "answer": "What is show? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "What is rootnode?",
        "answer": "What is rootnode? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "What is data?",
        "answer": "What is data? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "What is onwards?",
        "answer": "What is onwards? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "What is function?",
        "answer": "What is function? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. |"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "Who is Manifest?",
        "answer": "Who is Manifest? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "Who is Version?",
        "answer": "Who is Version? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "Who is V4?",
        "answer": "Who is V4? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "Who is show?",
        "answer": "Who is show? Parameters :                                          show(event) {}, till Manifest Version V4                                          show(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.hide | function | This is called when a panel is hidden. The"
    },
    {
        "question": "What is 'this?",
        "answer": "What is 'this? 'this' can be used to access                                       UxpPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe UXP"
    },
    {
        "question": "What is access?",
        "answer": "What is access? 'this' can be used to access                                       UxpPanelInfo object.\n\nThe UXPPanelInfo object is a list of the available panels.\n\nThe UXPPanelInfo object is a list of the available panels.\n\nThe UXPPanelInfo object is a list of"
    },
    {
        "question": "What is uxppanelinfo?",
        "answer": "What is uxppanelinfo? 'this' can be used to access                                       UxpPanelInfo object.\n\nUxppanelInfo object.\n\nUxppanelInfo object.\n\nUxppanelInfo object.\n\nUxppanelInfo object"
    },
    {
        "question": "What is object?",
        "answer": "What is object? 'this' can be used to access                                       UxpPanelInfo object.\n\nThe object is a list of objects that can be accessed by the user.\n\nThe object is a list of objects that can be accessed by the user. The object is a list of objects that can be"
    },
    {
        "question": "Who is UxpPanelInfo?",
        "answer": "Who is UxpPanelInfo? 'this' can be used to access                                       UxpPanelInfo object.\n\nUxpPanelInfo.prototype.getUxpPanelInfo()\n\nUxpPanelInfo.prototype.getUxpPanelInfo()\n\nUxpPanelInfo.prototype.getU"
    },
    {
        "question": "Who is object?",
        "answer": "Who is object? 'this' can be used to access                                       UxpPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe UXPPanel"
    },
    {
        "question": "What is function?",
        "answer": "What is function? This function can return a promise.\n\nfunction getValue () { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis"
    },
    {
        "question": "What is promise?",
        "answer": "What is promise? This function can return a promise.\n\nThe promise is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is"
    },
    {
        "question": "What is failure?",
        "answer": "What is failure? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use the following code to signal failure:\n\nimport { Error } from './error'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import"
    },
    {
        "question": "What is exception?",
        "answer": "What is exception? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use exception handling in a web application.\n\nimport { Exception } from './Exception'; import { Exception } from './Exception/Exception'; import { Exception } from './Exception/Exception.Exception'; import { Exception } from './Exception/Exception.Exception.Exception'; import { Exception } from './Exception/Exception.Exception.Exception'; import {"
    },
    {
        "question": "What is promise?",
        "answer": "What is promise? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use promise to signal failure.\n\nvar promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise ="
    },
    {
        "question": "What is default?",
        "answer": "What is default? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is a very important feature. It is important to note that this is not a bug, it is a feature.\n\nThis is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is a feature. It is"
    },
    {
        "question": "What is timeout?",
        "answer": "What is timeout? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is the default value for the timeout.\n\nThis is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default value for the timeout. This is the default"
    },
    {
        "question": "What is msec?",
        "answer": "What is msec? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is a bug in the config file.\n\nThis is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug in the config file. This is a bug"
    },
    {
        "question": "What is v5?",
        "answer": "What is v5? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nWhat is v6? This has a default Timeout of 300 MSec from manifest v6 onwards.\n\nWhat is v7? This has a default Timeout of 300 MSec from manifest v7 onwards.\n\nWhat is v8? This has a default Timeout of 300 MSec from manifest v8 onwards.\n\nWhat is v9? This has a"
    },
    {
        "question": "What is onwards?",
        "answer": "What is onwards? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds.\n\nThe default Timeout of 300 MSec is 0.5 seconds."
    },
    {
        "question": "Who is Timeout?",
        "answer": "Who is Timeout? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis has a default Timeout of 300 MSec from manifest v5 onwards. Timeout is not available for all users.\n\nThis is not available for all users. Timeout is not available for all users.\n\nTimeout is not available for all users.\n\nTimeout is not available for all users.\n\nTimeout is not available for all users."
    },
    {
        "question": "Who is of?",
        "answer": "Who is of? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the manifest that causes the timeouts to be reset.\n\nThis is a bug in the"
    },
    {
        "question": "Who is MSec?",
        "answer": "Who is MSec? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nThis has a default Timeout of 300 MSec from manifest v5 onwards. Timeout of 0.5 seconds.\n\nTimeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of 0.5 seconds. Timeout of"
    },
    {
        "question": "Who is from?",
        "answer": "Who is from? This has a default Timeout of 300 MSec from manifest v5 onwards.\n\nWhat is the default Timeout of 300 MSec?\n\nThe default Timeout of 300 MSec is 0.\n\nWhat is the default Timeout of 300 MSec?\n\nThe default Timeout of 300 MSec is 0.\n\nWhat is the default Timeout of 300 MSec?\n\nThe default Timeout of 300 MSec is 0.\n\n"
    },
    {
        "question": "What is parameters?",
        "answer": "What is parameters? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is hide?",
        "answer": "What is hide? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is event?",
        "answer": "What is event? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is manifest?",
        "answer": "What is manifest? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is version?",
        "answer": "What is version? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is v4?",
        "answer": "What is v4? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is hide?",
        "answer": "What is hide? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is rootnode?",
        "answer": "What is rootnode? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is data?",
        "answer": "What is data? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is onwards?",
        "answer": "What is onwards? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is entrypoints.panels.destroy?",
        "answer": "What is entrypoints.panels.destroy? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. |"
    },
    {
        "question": "What is function?",
        "answer": "What is function? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. |"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "Who is Manifest?",
        "answer": "Who is Manifest? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "Who is Version?",
        "answer": "Who is Version? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "Who is V4?",
        "answer": "Who is V4? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "Who is hide?",
        "answer": "Who is hide? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "Who is function?",
        "answer": "Who is function? Parameters :                                          hide(event) {}, till Manifest Version V4                                          hide(rootNode, data) {}, from v5 onwards |\n| entrypoints.panels.destroy | function | This is called when a panel is going to be destroyed. The"
    },
    {
        "question": "What is 'this?",
        "answer": "What is 'this? 'this' can be                                          used to access UxpPanelInfo object.\n\nThe following code snippet shows how to access the UXPPanelInfo object.\n\nusing System; using System.Collections.Generic; using System.Linq; using System.Text"
    },
    {
        "question": "What is access?",
        "answer": "What is access? 'this' can be                                          used to access UxpPanelInfo object.\n\nAccess to UXPPanelInfo object is not available in the current version of the application.\n\nAccess to UXPPanelInfo object is not available in the current version of the application.\n"
    },
    {
        "question": "What is uxppanelinfo?",
        "answer": "What is uxppanelinfo? 'this' can be                                          used to access UxpPanelInfo object.\n\nThe uxppanelinfo object is used to access the uxppanelinfo object.\n\nThe uxppanelinfo object is used to"
    },
    {
        "question": "What is object?",
        "answer": "What is object? 'this' can be                                          used to access UxpPanelInfo object.\n\nThe following code snippet shows how to access the UXPPanelInfo object.\n\nusing System; using System.Collections.Generic; using System.Linq; using System.Text;"
    },
    {
        "question": "Who is UxpPanelInfo?",
        "answer": "Who is UxpPanelInfo? 'this' can be                                          used to access UxpPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object."
    },
    {
        "question": "Who is object?",
        "answer": "Who is object? 'this' can be                                          used to access UxpPanelInfo object.\n\nThe following code snippet shows how to access the UXPPanelInfo object.\n\nusing System; using System.Collections.Generic; using System.Linq; using System.Text;"
    },
    {
        "question": "What is failure?",
        "answer": "What is failure? To signal failure, throw an exception.\n\nFailure is a common problem in software development. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers. It is a problem that is often overlooked by developers."
    },
    {
        "question": "What is exception?",
        "answer": "What is exception? To signal failure, throw an exception.\n\nThe exception is a string that contains the following characters:\n\n-a\n\n-b\n\n-c\n\n-d\n\n-e\n\n-f\n\n-g\n\n-h\n\n-i\n\n-j\n\n-k\n\n-l\n\n-m\n\n-n\n\n-o\n\n-p\n\n-q\n\n-r\n\n-"
    },
    {
        "question": "What is parameters?",
        "answer": "What is parameters? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is destroy?",
        "answer": "What is destroy? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is event?",
        "answer": "What is event? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is manifest?",
        "answer": "What is manifest? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is version?",
        "answer": "What is version? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is v4?",
        "answer": "What is v4? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is destroy?",
        "answer": "What is destroy? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is rootnode?",
        "answer": "What is rootnode? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is onwards?",
        "answer": "What is onwards? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is entrypoints.panels.invokemenu?",
        "answer": "What is entrypoints.panels.invokemenu? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is function?",
        "answer": "What is function? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is menu?",
        "answer": "What is menu? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is item?",
        "answer": "What is item? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "Who is Manifest?",
        "answer": "Who is Manifest? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "Who is Version?",
        "answer": "Who is Version? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "Who is V4?",
        "answer": "Who is V4? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "Who is destroy?",
        "answer": "Who is destroy? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "Who is function?",
        "answer": "Who is function? Parameters :                                          destroy(event) {}, till Manifest Version V4                                          destroy(rootNode) {}, from v5 onwards |\n| entrypoints.panels.invokeMenu | function | This is called when a panel menu item is invoked. The"
    },
    {
        "question": "What is menu?",
        "answer": "What is menu? Menu id is passed as the first argument to this function.\n\nThe menu is a list of items that can be displayed in the menu.\n\nThe menu is a list of items that can be displayed in the menu. The menu is a list of items that can be displayed in the menu. The menu is a list of items that can be displayed in the menu. The menu is a list of items that can be displayed in the menu. The menu is a list"
    },
    {
        "question": "What is id?",
        "answer": "What is id? Menu id is passed as the first argument to this function.\n\nThe id argument is passed as the first argument to this function. The id argument is passed as the second argument to this function.\n\nThe argument is passed as the third argument to this function.\n\nThe argument is passed as the fourth argument to this function.\n\nThe argument is passed as the fifth argument to this function.\n\nThe argument is passed as the sixth argument to this function."
    },
    {
        "question": "What is argument?",
        "answer": "What is argument? Menu id is passed as the first argument to this function.\n\nArgument Type Description argument_id Argument ID to use to determine the argument.\n\nArgument Type Description argument_name Argument name to use to determine the argument.\n\nArgument Type Description argument_value Argument value to use to determine the argument.\n\nArgument Type Description argument_value_id Argument value to use to determine the argument.\n\nArgument Type Description argument_value_"
    },
    {
        "question": "What is function?",
        "answer": "What is function? Menu id is passed as the first argument to this function.\n\nThe function is called when the user clicks on the menu item.\n\nThe function is called when the user clicks on the menu item. The function is called when the user clicks on the menu item. The function is called when the user clicks on the menu item. The function is called when the user clicks on the menu item. The function is called when the user clicks on the menu item. The function"
    },
    {
        "question": "Who is Menu?",
        "answer": "Who is Menu? Menu id is passed as the first argument to this function.\n\nThe first argument is the name of the menu.\n\nThe second argument is the name of the menu.\n\nThe third argument is the name of the menu.\n\nThe fourth argument is the name of the menu.\n\nThe fifth argument is the name of the menu.\n\nThe sixth argument is the name of the menu.\n\nThe seventh argument is the name of the menu."
    },
    {
        "question": "Who is id?",
        "answer": "Who is id? Menu id is passed as the first argument to this function.\n\nThe function is called with the id of the menu item.\n\nThe function is called with the id of the menu item. The function is called with the id of the menu item. The function is called with the id of the menu item. The function is called with the id of the menu item. The function is called with the id of the menu item. The function is called with the id of"
    },
    {
        "question": "What is 'this?",
        "answer": "What is 'this? 'this' can be                                             used to access UxpPanelInfo object.\n\nThe following code snippet shows how to access the UXPPanelInfo object.\n\nusing System; using System.Collections.Generic; using System.Linq; using"
    },
    {
        "question": "What is access?",
        "answer": "What is access? 'this' can be                                             used to access UxpPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object."
    },
    {
        "question": "What is uxppanelinfo?",
        "answer": "What is uxppanelinfo? 'this' can be                                             used to access UxpPanelInfo object.\n\nThe uxppanelinfo object is used to access the uxppanelinfo object.\n\nThe uxppanelinfo object"
    },
    {
        "question": "What is object?",
        "answer": "What is object? 'this' can be                                             used to access UxpPanelInfo object.\n\nThe following code snippet shows how to access the UXPPanelInfo object.\n\nusing System; using System.Collections.Generic; using System.Linq; using System"
    },
    {
        "question": "Who is UxpPanelInfo?",
        "answer": "Who is UxpPanelInfo? 'this' can be                                             used to access UxpPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanelInfo object.\n\nThe UXPPanelInfo object is used to access the UXPPanel"
    },
    {
        "question": "Who is object?",
        "answer": "Who is object? 'this' can be                                             used to access UxpPanelInfo object.\n\nThe following code snippet shows how to access the UXPPanelInfo object.\n\nusing System; using System.Collections.Generic; using System.Linq; using System"
    },
    {
        "question": "What is function?",
        "answer": "What is function? This function can return a promise.\n\nfunction getValue () { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis"
    },
    {
        "question": "What is promise?",
        "answer": "What is promise? This function can return a promise.\n\nThe promise is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is"
    },
    {
        "question": "What is failure?",
        "answer": "What is failure? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use the following code to signal failure:\n\nimport { Error } from './error'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import"
    },
    {
        "question": "What is exception?",
        "answer": "What is exception? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use exception handling in a web application.\n\nimport { Exception } from './Exception'; import { Exception } from './Exception/Exception'; import { Exception } from './Exception/Exception.Exception'; import { Exception } from './Exception/Exception.Exception.Exception'; import { Exception } from './Exception/Exception.Exception.Exception'; import {"
    },
    {
        "question": "What is promise?",
        "answer": "What is promise? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use promise to signal failure.\n\nvar promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise ="
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events.\n\n| | |"
    },
    {
        "question": "What is entrypoints.panels.customentrypoint?",
        "answer": "What is entrypoints.panels.customentrypoint? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events.\n\n| | |"
    },
    {
        "question": "What is function?",
        "answer": "What is function? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n| entrypoints"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events.\n\n| | |"
    },
    {
        "question": "What is apart?",
        "answer": "What is apart? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n\n| entry"
    },
    {
        "question": "What is above?",
        "answer": "What is above? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n\n| entry"
    },
    {
        "question": "What is default?",
        "answer": "What is default? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n| entrypoints"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n\n| entry"
    },
    {
        "question": "What is entrypoints?",
        "answer": "What is entrypoints? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n| additional"
    },
    {
        "question": "What is host?",
        "answer": "What is host? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n\n| entry"
    },
    {
        "question": "What is apps?",
        "answer": "What is apps? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. | | | | |"
    },
    {
        "question": "What is entrypoints?",
        "answer": "What is entrypoints? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n| additional"
    },
    {
        "question": "What is custon?",
        "answer": "What is custon? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n\n|"
    },
    {
        "question": "What is lifecycle?",
        "answer": "What is lifecycle? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. | | | |"
    },
    {
        "question": "What is events?",
        "answer": "What is events? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n\n| entry"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events.\n\nThe following table"
    },
    {
        "question": "Who is entrypoints.panels.customEntrypoint?",
        "answer": "Who is entrypoints.panels.customEntrypoint? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events.\n\nThe following table"
    },
    {
        "question": "Who is function?",
        "answer": "Who is function? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n| entrypoints"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events.\n\nThe following table"
    },
    {
        "question": "Who is Apart?",
        "answer": "Who is Apart? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events.\n\n| entrypoints"
    },
    {
        "question": "Who is from?",
        "answer": "Who is from? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events. |\n\n| entry"
    },
    {
        "question": "Who is Host?",
        "answer": "Who is Host? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events.\n\n| entrypoints"
    },
    {
        "question": "Who is Apps?",
        "answer": "Who is Apps? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events.\n\n| entrypoints"
    },
    {
        "question": "Who is can?",
        "answer": "Who is can? |\n| entrypoints.panels.customEntrypoint | function | Apart from the above default uxp panel entrypoints, Host Apps can define                                                   additional entrypoints to support custon lifecycle events.\n\n| entrypoints"
    },
    {
        "question": "What is details?",
        "answer": "What is details? Details of the entrypoint like                                                   name, parameters passed, return type, etc.\n\nThe entrypoint is a simple, simple, simple, simple, simple, simple, simple, simple, simple, simple, simple, simple"
    },
    {
        "question": "What is entrypoint?",
        "answer": "What is entrypoint? Details of the entrypoint like                                                   name, parameters passed, return type, etc.\n\nThe following example shows how to use the entrypoint to access the following fields:\n\n{ \"name\" : \"John Doe\","
    },
    {
        "question": "What is name?",
        "answer": "What is name? Details of the entrypoint like                                                   name, parameters passed, return type, etc.\n\nThe following example shows how to use the name of the entrypoint.\n\nimport { EntryPoint } from './entrypoint'; import"
    },
    {
        "question": "What is parameters?",
        "answer": "What is parameters? Details of the entrypoint like                                                   name, parameters passed, return type, etc.\n\nThe following example shows how to use parameters to define a function.\n\nfunction foo(x, y) { return x + y;"
    },
    {
        "question": "What is return?",
        "answer": "What is return? Details of the entrypoint like                                                   name, parameters passed, return type, etc.\n\nThe return type is a string, which is used to indicate that the entrypoint is not a valid entrypoint.\n\nThe return type"
    },
    {
        "question": "What is type?",
        "answer": "What is type? Details of the entrypoint like                                                   name, parameters passed, return type, etc.\n\nThe following example shows how to use the type of the entrypoint.\n\ntype EntryPoint = { \"name\" : \"John Doe"
    },
    {
        "question": "What is host?",
        "answer": "What is host? are defined by the host app.\n\nHosting\n\nHosting is a way to provide a service to a user. It is a way to provide a service to a user. It is a way to provide a service to a user. It is a way to provide a service to a user. It is a way to provide a service to a user. It is a way to provide a service to a user. It is a way to provide a service to a"
    },
    {
        "question": "What is app?",
        "answer": "What is app? are defined by the host app.\n\nWhat is app? are defined by the host app. What is app? are defined by the host app. What is app? are defined by the host app. What is app? are defined by the host app. What is app? are defined by the host app. What is app? are defined by the host app. What is app? are defined by the host app. What is app? are defined by the host app"
    },
    {
        "question": "What is photoshop?",
        "answer": "What is photoshop? Currently, Photoshop hasn't defined any custom entrypoints.\n\nWhat is the difference between a \"real\" image and a \"fake\" image?\n\nWhat is the difference between a \"real\" image and a \"fake\" image?\n\nWhat is the difference between a \"real\" image and a \"fake\" image?\n\nWhat is the difference between a \"real\" image and a \"fake\" image?\n\nWhat is the difference between a"
    },
    {
        "question": "What is custom?",
        "answer": "What is custom? Currently, Photoshop hasn't defined any custom entrypoints.\n\nCustom entries are created by the user, and are created by the user's own code.\n\nCustom entries are created by the user's own code. Custom entries are created by the user's own code.\n\nCustom entries are created by the user's own code.\n\nCustom entries are created by the user's own code.\n\nCustom entries are created by the user's own code.\n\n"
    },
    {
        "question": "What is entrypoints?",
        "answer": "What is entrypoints? Currently, Photoshop hasn't defined any custom entrypoints.\n\nWhat is the difference between a custom entrypoint and a custom entrypoint?\n\nCustom entrypoints are the most common type of entrypoint. They are used to create a new entrypoint, or to create a new image.\n\nCustom entrypoints are used to create a new image. Custom entrypoints are used to create a new image.\n\nWhat is the difference between a custom entrypoint and"
    },
    {
        "question": "Who is Photoshop?",
        "answer": "Who is Photoshop? Currently, Photoshop hasn't defined any custom entrypoints.\n\nWhat is the difference between a custom entrypoint and a custom entrypoint?\n\nCustom entrypoints are the most common type of entrypoint. They are used to create a custom image, or to create a custom image for a specific user.\n\nCustom entrypoints are used to create a custom image, or to create a custom image for a specific user. Custom entrypoints are used to create a custom image"
    },
    {
        "question": "Who is has?",
        "answer": "Who is has? Currently, Photoshop hasn't defined any custom entrypoints.\n\nWhat is the current state of the tool?\n\nThe tool is currently in beta.\n\nWhat is the current state of the tool?\n\nThe tool is currently in beta.\n\nWhat is the current state of the tool?\n\nThe tool is currently in beta.\n\nWhat is the current state of the tool?\n\nThe tool is currently in beta.\n\nWhat is the"
    },
    {
        "question": "What is xd?",
        "answer": "What is xd? Xd has defined one custom entrypoint update. It is a simple function that takes a list of values and returns a list of the values. The first value is the current value. The second value is the current value. The third value is the current value. The fourth value is the current value. The fifth value is the current value. The sixth value is the current value. The seventh value is the current value. The eighth value is the current value. The ninth"
    },
    {
        "question": "What is custom?",
        "answer": "What is custom? Xd has defined one custom entrypoint update.\n\nCustom entrypoint update\n\nThe custom entrypoint update is a custom entrypoint that is used to update the current state of the application.\n\nThe custom entrypoint update is a custom entrypoint that is used to update the current state of the application.\n\nThe custom entrypoint update is a custom entrypoint that is used to update the current state of the application.\n\nThe custom entrypoint update is"
    },
    {
        "question": "What is entrypoint?",
        "answer": "What is entrypoint? Xd has defined one custom entrypoint update.\n\nThe entrypoint is a unique identifier that is used to identify the entrypoint.\n\nThe entrypoint is a unique identifier that is used to identify the entrypoint. The entrypoint is a unique identifier that is used to identify the entrypoint. The entrypoint is a unique identifier that is used to identify the entrypoint. The entrypoint is a unique identifier that is used to identify the entrypoint. The"
    },
    {
        "question": "What is update?",
        "answer": "What is update? Xd has defined one custom entrypoint update.\n\nUpdate is a method that updates the current state of the current object.\n\nUpdate is a method that updates the current state of the current object. Update is a method that updates the current state of the current object. Update is a method that updates the current state of the current object. Update is a method that updates the current state of the current object. Update is a method that updates the current state of the current"
    },
    {
        "question": "What is entrypoint?",
        "answer": "What is entrypoint? update entrypoint in XD is called whenever panel UI content should be updated.\n\nHow do I update the entrypoint?\n\nThe following steps are required to update the entrypoint.\n\n1. Open the XD window.\n\n2. Click on the \"Edit\" button.\n\n3. Click on the \"Edit\" button.\n\n4. Click on the \"Edit\" button.\n\n5. Click on the \"Edit\" button."
    },
    {
        "question": "What is xd?",
        "answer": "What is xd? update entrypoint in XD is called whenever panel UI content should be updated.\n\nThe xd command is used to update the xd entrypoint in the panel UI.\n\nThe xd command is used to update the xd entrypoint in the panel UI. The xd command is used to update the xd entrypoint in the panel UI. The xd command is used to update the xd entrypoint in the panel UI. The xd command"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? update entrypoint in XD is called whenever panel UI content should be updated.\n\nThe panel is a simple, simple way to update the panel.\n\nThe panel is a simple, simple way to update the panel. The panel is a simple, simple way to update the panel. The panel is a simple, simple way to update the panel. The panel is a simple, simple way to update the panel. The panel is a simple, simple way to update the panel"
    },
    {
        "question": "What is ui?",
        "answer": "What is ui? update entrypoint in XD is called whenever panel UI content should be updated.\n\nThe following is a list of the most common errors that can occur when updating a panel UI.\n\nThe following is a list of the most common errors that can occur when updating a panel UI. The following is a list of the most common errors that can occur when updating a panel UI. The following is a list of the most common errors that can occur when updating a panel UI."
    },
    {
        "question": "What is content?",
        "answer": "What is content? update entrypoint in XD is called whenever panel UI content should be updated.\n\nHow do I update the content?\n\nThe content is updated when the panel UI content is updated.\n\nHow do I update the content?\n\nThe content is updated when the panel UI content is updated.\n\nHow do I update the content?\n\nThe content is updated when the panel UI content is updated.\n\nHow do I update the content?\n\nThe"
    },
    {
        "question": "Who is XD?",
        "answer": "Who is XD? update entrypoint in XD is called whenever panel UI content should be updated.\n\nThe update entrypoint is called when the panel UI content should be updated. The update entrypoint is called when the panel UI content should be updated. The update entrypoint is called when the panel UI content should be updated. The update entrypoint is called when the panel UI content should be updated.\n\nThe update entrypoint is called when the panel UI content should be updated. The update"
    },
    {
        "question": "Who is is?",
        "answer": "Who is is? update entrypoint in XD is called whenever panel UI content should be updated.\n\nUpdate the panel UI content in XD is called whenever panel UI content should be updated. Update the panel UI content in XD is called whenever panel UI content should be updated.\n\nUpdate the panel UI content in XD is called whenever panel UI content should be updated.\n\nUpdate the panel UI content in XD is called whenever panel UI content should be updated.\n\nUpdate the panel UI content"
    },
    {
        "question": "Who is UI?",
        "answer": "Who is UI? update entrypoint in XD is called whenever panel UI content should be updated.\n\nThe following is a list of the most common UI elements that are not currently supported by the XD editor.\n\nThe following is a list of the most common UI elements that are not currently supported by the XD editor.\n\nThe following is a list of the most common UI elements that are not currently supported by the XD editor.\n\nThe following is a list of the most common UI"
    },
    {
        "question": "Who is content?",
        "answer": "Who is content? update entrypoint in XD is called whenever panel UI content should be updated.\n\nUpdate entrypoint in XD is called whenever panel UI content should be updated. Update entrypoint in XD is called whenever panel UI content should be updated.\n\nUpdate entrypoint in XD is called whenever panel UI content should be updated.\n\nUpdate entrypoint in XD is called whenever panel UI content should be updated.\n\nUpdate entrypoint in XD is called whenever panel UI content should be"
    },
    {
        "question": "What is parameters?",
        "answer": "What is parameters? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "What is update?",
        "answer": "What is update? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "What is scenegraph.selection?",
        "answer": "What is scenegraph.selection? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "What is scenegraph.update?",
        "answer": "What is scenegraph.update? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "What is https?",
        "answer": "What is https? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "What is array?",
        "answer": "What is array? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "What is array?",
        "answer": "What is array? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "What is menu?",
        "answer": "What is menu? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items.\n"
    },
    {
        "question": "What is items?",
        "answer": "What is items? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "Who is entrypoints.panels.menuItems?",
        "answer": "Who is entrypoints.panels.menuItems? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items.\n"
    },
    {
        "question": "Who is Array?",
        "answer": "Who is Array? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items.\n"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "Who is array?",
        "answer": "Who is array? Parameters : update(scenegraph.selection, scenegraph.update)                                                        https://developer.adobe.com/xd/uxp/develop/reference/ui/panels/update/ |\n| entrypoints.panels.menuItems | Array | array of menu items. |"
    },
    {
        "question": "What is menu?",
        "answer": "What is menu? Each menu item can be a string or an object with                                         properties defined below.\n\nThe following table lists the properties of each menu item.\n\nProperty Description                        "
    },
    {
        "question": "What is item?",
        "answer": "What is item? Each menu item can be a string or an object with                                         properties defined below.\n\nThe following table lists the properties of each item.\n\nProperty Description                         "
    },
    {
        "question": "What is string?",
        "answer": "What is string? Each menu item can be a string or an object with                                         properties defined below.\n\nThe following table lists the properties of each menu item.\n\nProperty Description                        "
    },
    {
        "question": "What is properties?",
        "answer": "What is properties? Each menu item can be a string or an object with                                         properties defined below.\n\nThe following table lists the properties of each menu item.\n\nProperty Description                        "
    },
    {
        "question": "What is menu?",
        "answer": "What is menu? Menu items are displayed in the                                         same order as specified in this array.\n\nThe menu item is displayed in the                                 "
    },
    {
        "question": "What is items?",
        "answer": "What is items? Menu items are displayed in the                                         same order as specified in this array.\n\nThe                                       "
    },
    {
        "question": "What is order?",
        "answer": "What is order? Menu items are displayed in the                                         same order as specified in this array.\n\nThe order of items in the menu is determined by the order of the items in the menu.\n\nThe order of items in the menu is determined by the order of the items in the menu."
    },
    {
        "question": "What is array?",
        "answer": "What is array? Menu items are displayed in the                                         same order as specified in this array.\n\nThe                                       "
    },
    {
        "question": "Who is Menu?",
        "answer": "Who is Menu? Menu items are displayed in the                                         same order as specified in this array.\n\nThe                                       "
    },
    {
        "question": "Who is items?",
        "answer": "Who is items? Menu items are displayed in the                                         same order as specified in this array.\n\nThe                                       "
    },
    {
        "question": "What is separator?",
        "answer": "What is separator? For specifying a separator,                                         a value of \"-\" or menu item with label \"-\" can be used at required place in the array.\n\nThe separator is a string that is separated by a space. The separator is a string that is separated by a space"
    },
    {
        "question": "What is value?",
        "answer": "What is value? For specifying a separator,                                         a value of \"-\" or menu item with label \"-\" can be used at required place in the array.\n\nThe value of a separator is a string that contains the separator name, the separator separator, and the separator"
    },
    {
        "question": "What is item?",
        "answer": "What is item? For specifying a separator,                                         a value of \"-\" or menu item with label \"-\" can be used at required place in the array.\n\nExample:\n\n#include <stdio.h> #include <string.h> #include <stdlib.h"
    },
    {
        "question": "What is label?",
        "answer": "What is label? For specifying a separator,                                         a value of \"-\" or menu item with label \"-\" can be used at required place in the array.\n\nThe following example shows the use of a separator in the following example.\n\n#include <stdio.h> #"
    },
    {
        "question": "What is place?",
        "answer": "What is place? For specifying a separator,                                         a value of \"-\" or menu item with label \"-\" can be used at required place in the array.\n\nThe following example shows the use of a separator in the following example.\n\n<!-- This example uses a separator in"
    },
    {
        "question": "What is array?",
        "answer": "What is array? For specifying a separator,                                         a value of \"-\" or menu item with label \"-\" can be used at required place in the array.\n\nThe following example shows how to use the array to specify a separator.\n\n<?php namespace App\\Http\\Controllers"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is entrypoints.panels.menuitems.id?",
        "answer": "What is entrypoints.panels.menuitems.id? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. |\n\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. |\n\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. |\n\n| entrypoints.panels.menuItems.id | string | identifier"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is string?",
        "answer": "What is string? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is identifier?",
        "answer": "What is identifier? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is menu?",
        "answer": "What is menu? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is item?",
        "answer": "What is item? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.panels.menuItems.id?",
        "answer": "Who is entrypoints.panels.menuItems.id? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. |\n\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. |\n\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. |\n\n| entrypoints.panels.menuItems.id | string | identifier of"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is string?",
        "answer": "Who is string? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is identifier?",
        "answer": "Who is identifier? |\n| entrypoints.panels.menuItems.id | string | identifier of the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is entrypoints.panels.menuitems.label?",
        "answer": "What is entrypoints.panels.menuitems.label? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. |\n\n| entrypoints.panels.menuItems.label | string | display text for the menu item. |\n\n| entrypoints.panels.menuItems.label | string | display text for the menu item. |\n\n| entrypoints.panels.menuItems.label |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is string?",
        "answer": "What is string? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is display?",
        "answer": "What is display? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is text?",
        "answer": "What is text? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is menu?",
        "answer": "What is menu? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is item?",
        "answer": "What is item? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.panels.menuItems.label?",
        "answer": "Who is entrypoints.panels.menuItems.label? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. |\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|\n\n|"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is string?",
        "answer": "Who is string? |\n| entrypoints.panels.menuItems.label | string | display text for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is label?",
        "answer": "What is label? If label is not                                              specified, id is used as label.\n\nIf label is not                                 "
    },
    {
        "question": "What is id?",
        "answer": "What is id? If label is not                                              specified, id is used as label.\n\nIf label is not                                 "
    },
    {
        "question": "What is label?",
        "answer": "What is label? If label is not                                              specified, id is used as label.\n\nIf label is not                                 "
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.enabled | boolean | enabled/disabled state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.enabled | boolean | enabled/disabled state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is state?",
        "answer": "What is state? |\n| entrypoints.panels.menuItems.enabled | boolean | enabled/disabled state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is menu?",
        "answer": "What is menu? |\n| entrypoints.panels.menuItems.enabled | boolean | enabled/disabled state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is item?",
        "answer": "What is item? |\n| entrypoints.panels.menuItems.enabled | boolean | enabled/disabled state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.menuItems.enabled | boolean | enabled/disabled state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.panels.menuItems.enabled?",
        "answer": "Who is entrypoints.panels.menuItems.enabled? |\n| entrypoints.panels.menuItems.enabled | boolean | enabled/disabled state for the menu item. |\n\n|\n\n| The following is a list of all the menu items that are enabled/disabled.\n\n|\n\n| The following is a list of all the menu items that are disabled/disabled.\n\n|\n\n| The following is a list of all the menu items that"
    },
    {
        "question": "What is default?",
        "answer": "What is default? Default - true.\n\n- true. Default - false.\n\n- false. Default - true.\n\n- true. Default - false.\n\n- false. Default - false.\n\n- false. Default - false.\n\n- false. Default - false.\n\n- false. Default - false.\n\n- false. Default - false.\n\n- false. Default - false.\n\n- false. Default - false.\n\n"
    },
    {
        "question": "Who is Default?",
        "answer": "Who is Default? Default - true. Default - false. Default - true. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false. Default - false."
    },
    {
        "question": "Who is -?",
        "answer": "Who is -? Default - true.\n\n-? Default - true. Default - false.\n\n-? Default - false. Default - true.\n\n-? Default - true. Default - false.\n\n-? Default - false. Default - true.\n\n-? Default - true. Default - false.\n\n-? Default - true. Default - false.\n\n-? Default - true. Default - false.\n\n-? Default - true."
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.checked | boolean | checked state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.checked | boolean | checked state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is state?",
        "answer": "What is state? |\n| entrypoints.panels.menuItems.checked | boolean | checked state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is menu?",
        "answer": "What is menu? |\n| entrypoints.panels.menuItems.checked | boolean | checked state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is item?",
        "answer": "What is item? |\n| entrypoints.panels.menuItems.checked | boolean | checked state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.menuItems.checked | boolean | checked state for the menu item. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.panels.menuItems.checked?",
        "answer": "Who is entrypoints.panels.menuItems.checked? |\n| entrypoints.panels.menuItems.checked | boolean | checked state for the menu item. |\n\n| checked state for the menu item. | boolean | checked state for the menu item. | boolean | checked state for the menu item. | boolean | checked state for the menu item. | boolean | checked state for the menu item. | boolean | checked state for the menu item. | boolean |"
    },
    {
        "question": "What is default?",
        "answer": "What is default? Default - false.\n\nDefault - false. Default - true.\n\nDefault - true. Default - false.\n\nDefault - false. Default - true.\n\nDefault - true. Default - false.\n\nDefault - false. Default - true.\n\nDefault - true. Default - false.\n\nDefault - true. Default - false.\n\nDefault - true. Default - false.\n\nDefault - true. Default - false.\n\n"
    },
    {
        "question": "What is false?",
        "answer": "What is false? Default - false.\n\nExample:\n\n$ curl -X POST https://api.example.com/v1/users/1/id?user_id=1&password=1&password_id=1&password_id=1&password_id=1&password_id=1&password_id=1&password_id=1&password_id=1&password_id=1&password_id=1&"
    },
    {
        "question": "Who is Default?",
        "answer": "Who is Default? Default - false.\n\nDefault - false. Default - true.\n\nDefault - true. Default - false.\n\nDefault - false. Default - true.\n\nDefault - true. Default - false.\n\nDefault - false. Default - true.\n\nDefault - true. Default - false.\n\nDefault - true. Default - false.\n\nDefault - true. Default - false.\n\nDefault - true. Default - false.\n\n"
    },
    {
        "question": "Who is -?",
        "answer": "Who is -? Default - false.\n\n-? Default - false. Default - true.\n\n-? Default - true. Default - false.\n\n-? Default - false. Default - true.\n\n-? Default - true. Default - false.\n\n-? Default - false. Default - true.\n\n-? Default - true. Default - false.\n\n-? Default - false. Default - true.\n\n-? Default - true."
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is entrypoints.panels.menuitems.submenu?",
        "answer": "What is entrypoints.panels.menuitems.submenu? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is array?",
        "answer": "What is array? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is submenu?",
        "answer": "What is submenu? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is menu?",
        "answer": "What is menu? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is item?",
        "answer": "What is item? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is array?",
        "answer": "What is array? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is 'menuitems?",
        "answer": "What is'menuitems? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.panels.menuItems.submenu?",
        "answer": "Who is entrypoints.panels.menuItems.submenu? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is Array?",
        "answer": "Who is Array? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is submenu?",
        "answer": "Who is submenu? |\n| entrypoints.panels.menuItems.submenu | Array | submenu for this menu item again as an array of'menuItems'. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is submenus?",
        "answer": "What is submenus? 'id' of submenus should still be unique across panel.\n\nThe submenus of submenus is a term used to describe the position of a submenus in a given situation. It is used to describe the position of a submenus in a given situation. It is used to describe the position of a submenus in a given situation.\n\nThe submenus of submenus is a term used to describe the position"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? 'id' of submenus should still be unique across panel.\n\nWhat is panel? 'id' of submenus should still be unique across panel. What is panel? 'id' of submenus should still be unique across panel. What is panel? 'id' of submenus should still be unique across panel. What is panel? 'id' of submenus should still be unique across panel. What is panel? 'id' of"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is array?",
        "answer": "What is array? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is <?",
        "answer": "What is <? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is >?",
        "answer": "What is >? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n\n| entrypoints.commands | Array<object> | This object contains"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is object?",
        "answer": "What is object? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is list?",
        "answer": "What is list? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is pairs?",
        "answer": "What is pairs? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is key?",
        "answer": "What is key? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is command?",
        "answer": "What is command? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is id?",
        "answer": "What is id? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is value?",
        "answer": "What is value? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is command?",
        "answer": "What is command? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is data?",
        "answer": "What is data? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is type?",
        "answer": "What is type? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is object?",
        "answer": "What is object? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is function?",
        "answer": "What is function? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.commands?",
        "answer": "Who is entrypoints.commands? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function. |\n| This object contains a list of key-value pairs where"
    },
    {
        "question": "Who is Array?",
        "answer": "Who is Array? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| This object contains a list of key-value pairs where each key is the"
    },
    {
        "question": "Who is <?",
        "answer": "Who is <? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is object?",
        "answer": "Who is object? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "Who is >?",
        "answer": "Who is >? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is This?",
        "answer": "Who is This? |\n| entrypoints.commands | Array<object> | This object contains a list of key-value pairs where each key is the command id and                                 value is command's data whose type can be an object or function.\n\n| entrypoints.commands | Array<object> | This object contains a"
    },
    {
        "question": "What is function?",
        "answer": "What is function? If a function, it is assumed to be 'run' method (described below).\n\nIf a function, it is assumed to be 'run' method (described below). If a function, it is assumed to be 'run' method (described below). If a function, it is assumed to be 'run' method (described below). If a function, it is assumed to be 'run' method (described below). If a function, it is assumed to be"
    },
    {
        "question": "What is method?",
        "answer": "What is method? If a function, it is assumed to be 'run' method (described below).\n\nIf a function is 'run' method, it is assumed to be 'run' method (described below). If a function is 'run' method, it is assumed to be 'run' method (described below). If a function is 'run' method, it is assumed to be 'run' method (described below). If a function is 'run' method, it is"
    },
    {
        "question": "What is objet?",
        "answer": "What is objet? If an objet, it can contain following properties but 'run' is must to specify.\n\nobjet.run(name, value)\n\nRuns the objet. Run method.\n\nobjet.run(name, value)\n\nRuns the objet. Run method.\n\nobjet.run(name, value)\n\nRuns the objet. Run method.\n\nobjet.run(name, value"
    },
    {
        "question": "What is properties?",
        "answer": "What is properties? If an objet, it can contain following properties but 'run' is must to specify.\n\nProperty Description run_obj_name The name of the objet. run_obj_name_string The string of the objet. run_obj_name_string_long The string of the objet. run_obj_name_string_double The string of the objet. run_obj_name_string_double_long The string of the"
    },
    {
        "question": "What is 'run?",
        "answer": "What is 'run? If an objet, it can contain following properties but 'run' is must to specify.\n\n'run' is a boolean value that indicates whether the objet is running.\n\n'run' is a boolean value that indicates whether the objet is running. 'run' is a boolean value that indicates whether the objet is running. 'run' is a boolean value that indicates whether the objet is running. 'run' is a boolean value that"
    },
    {
        "question": "Who is 'run?",
        "answer": "Who is 'run? If an objet, it can contain following properties but 'run' is must to specify.\n\nThe following properties are required for the 'run' property:\n\nThe 'run' property is used to specify the 'run' property of the objet.\n\nThe 'run' property is used to specify the 'run' property of the objet. The 'run' property is used to specify the 'run' property of the objet. The"
    },
    {
        "question": "Who is '?",
        "answer": "Who is '? If an objet, it can contain following properties but 'run' is must to specify.\n\nIf an objet, it can contain following properties but 'run' is must to specify. If an objet, it can contain following properties but 'run' is must to specify. If an objet, it can contain following properties but 'run' is must to specify.\n\nIf an objet, it can contain following properties but 'run' is must"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.commands.run | function | This is called when the command is invoked via menu entry.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is entrypoints.commands.run?",
        "answer": "What is entrypoints.commands.run? |\n| entrypoints.commands.run | function | This is called when the command is invoked via menu entry. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.commands.run | function | This is called when the command is invoked via menu entry.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is function?",
        "answer": "What is function? |\n| entrypoints.commands.run | function | This is called when the command is invoked via menu entry. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? |\n| entrypoints.commands.run | function | This is called when the command is invoked via menu entry.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is command?",
        "answer": "What is command? |\n| entrypoints.commands.run | function | This is called when the command is invoked via menu entry. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is entry?",
        "answer": "What is entry? |\n| entrypoints.commands.run | function | This is called when the command is invoked via menu entry. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.commands.run | function | This is called when the command is invoked via menu entry.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is entrypoints.commands.run?",
        "answer": "Who is entrypoints.commands.run? |\n| entrypoints.commands.run | function | This is called when the command is invoked via menu entry.commands.run. |\n\n| This is called when the command is invoked via menu entry.commands.run. | function | This is called when the command is invoked via menu entry.commands.run. | function | This is called when the command is invoked via menu entry.commands.run"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? |\n| entrypoints.commands.run | function | This is called when the command is invoked via menu entry.\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "Who is function?",
        "answer": "Who is function? |\n| entrypoints.commands.run | function | This is called when the command is invoked via menu entry. | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "question": "What is 'this?",
        "answer": "What is 'this? 'this' can be used                                      to access UxpCommandInfo object.\n\nThe 'this' is used to access the 'this' object.\n\nThe 'this' is used to access the 'this' object.\n\nThe 'this' is used to access the '"
    },
    {
        "question": "What is access?",
        "answer": "What is access? 'this' can be used                                      to access UxpCommandInfo object.\n\nAccess to UXPCommandInfo object is not available in the current version of the API.\n\nAccess to UXPCommandInfo object is not available in the current version of the API.\n\nAccess to U"
    },
    {
        "question": "What is uxpcommandinfo?",
        "answer": "What is uxpcommandinfo? 'this' can be used                                      to access UxpCommandInfo object.\n\nThe uxpcommandinfo object is a list of commands that can be used to execute commands.\n\nThe uxpcommandinfo object is a list of commands that can be used to execute commands."
    },
    {
        "question": "What is object?",
        "answer": "What is object? 'this' can be used                                      to access UxpCommandInfo object.\n\nThe object is a list of objects that can be accessed by the UXP_CONFIG_KEY_INFO_KEY_INFO_KEY_INFO_KEY_INFO_KEY_INFO_KEY_INFO_"
    },
    {
        "question": "Who is UxpCommandInfo?",
        "answer": "Who is UxpCommandInfo? 'this' can be used                                      to access UxpCommandInfo object.\n\nThe UXPCommandInfo object is used to access the command line interface of the command line.\n\nThe UXPCommandInfo object is used to access the command line interface of the command line."
    },
    {
        "question": "Who is object?",
        "answer": "Who is object? 'this' can be used                                      to access UxpCommandInfo object.\n\nThe UXP_COMMAND_INFO_TYPE is used to access the UXP_COMMAND_INFO_TYPE object.\n\nThe UXP_COMMAND_INFO_TYPE is used"
    },
    {
        "question": "What is function?",
        "answer": "What is function? This function can return a promise.\n\nfunction getValue () { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis function returns a promise.\n\nfunction getValue ( value ) { return this. getValue (); }\n\nThis"
    },
    {
        "question": "What is promise?",
        "answer": "What is promise? This function can return a promise.\n\nThe promise is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is a string that contains the value of the promise.\n\nThe promise is a string that contains the value of the promise. The value is"
    },
    {
        "question": "What is failure?",
        "answer": "What is failure? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use the following code to signal failure:\n\nimport { Error } from './error'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import { Error } from './error.js'; import"
    },
    {
        "question": "What is exception?",
        "answer": "What is exception? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use exception handling in a web application.\n\nimport { Exception } from './Exception'; import { Exception } from './Exception/Exception'; import { Exception } from './Exception/Exception.Exception'; import { Exception } from './Exception/Exception.Exception.Exception'; import { Exception } from './Exception/Exception.Exception.Exception'; import {"
    },
    {
        "question": "What is promise?",
        "answer": "What is promise? To signal failure, throw an exception or return a rejected promise.\n\nThe following example shows how to use promise to signal failure.\n\nvar promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise = require('promise'); var promise ="
    },
    {
        "question": "What is parameters?",
        "answer": "What is parameters? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is run?",
        "answer": "What is run? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is event?",
        "answer": "What is event? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is manifest?",
        "answer": "What is manifest? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is version?",
        "answer": "What is version? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is v4?",
        "answer": "What is v4? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is run?",
        "answer": "What is run? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is arguments?",
        "answer": "What is arguments? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is onwards?",
        "answer": "What is onwards? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is entrypoints.commands.cancel?",
        "answer": "What is entrypoints.commands.cancel? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is function?",
        "answer": "What is function? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is use?",
        "answer": "What is use? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "Who is Manifest?",
        "answer": "Who is Manifest? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "Who is Version?",
        "answer": "Who is Version? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "Who is V4?",
        "answer": "Who is V4? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "Who is run?",
        "answer": "Who is run? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "Who is function?",
        "answer": "Who is function? Parameters :                                          run(event) {}, till Manifest Version V4                                          run(executionContext,...arguments) {}, from v5 onwards |\n| entrypoints.commands.cancel | function | For future use.\n"
    },
    {
        "question": "What is example?",
        "answer": "What is example? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is js?",
        "answer": "What is js? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is const?",
        "answer": "What is const? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is entrypoints?",
        "answer": "What is entrypoints? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is require?",
        "answer": "What is require? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is plugin?",
        "answer": "What is plugin? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is panels?",
        "answer": "What is panels? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is panel1?",
        "answer": "What is panel1? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is customentrypoint?",
        "answer": "What is customentrypoint? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is example?",
        "answer": "What is example? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is validatnode?",
        "answer": "What is validatnode? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is example?",
        "answer": "What is example? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is menuitems?",
        "answer": "What is menuitems? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is id?",
        "answer": "What is id? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is signin?",
        "answer": "What is signin? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is label?",
        "answer": "What is label? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is sign?",
        "answer": "What is sign? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is submenu?",
        "answer": "What is submenu? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is id?",
        "answer": "What is id? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is submenu1?",
        "answer": "What is submenu1? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is label?",
        "answer": "What is label? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is submenu1?",
        "answer": "What is submenu1? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is submenu2?",
        "answer": "What is submenu2? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is ]?",
        "answer": "What is ]? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is //?",
        "answer": "What is //? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is separator?",
        "answer": "What is separator? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "Who is Example?",
        "answer": "Who is Example? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "Who is js?",
        "answer": "Who is js? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "Who is ]?",
        "answer": "Who is ]? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "Who is }?",
        "answer": "Who is }? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "Who is //?",
        "answer": "Who is //? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "Who is separator?",
        "answer": "Who is separator? | Example\njs\nconst { entrypoints } = require(\"uxp\");\n entrypoints.setup({\n     plugin: {\n         create() {..},\n         destroy() {..}\n     },\n     panels: {\n         \"panel1\": {\n             create() {..},\n             show() {..},\n             hide() {..},\n             destroy() {..},\n             invokeMenu() {..},\n             update() {..}, // customEntrypoint example\n             validatNode() {..} // customEntrypoint example\n              menuItems: [\n                  {\n                      id: \"signIn\",\n                      label: \"Sign In...\",\n                      enabled: false,\n                      checked: false\n                      submenu: [\n                          { id: \"submenu1\", label: \"submenu1\", enabled: false, checked: false},\n                          { \"submenu2\" }\n                      ]\n                  },\n                  \"-\",  // separator.\n"
    },
    {
        "question": "What is sign?",
        "answer": "What is sign? \"Sign out\",  // by default enabled, and the id will be same with the label.\n              ]\n\nif (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (! (!"
    },
    {
        "question": "What is default?",
        "answer": "What is default? \"Sign out\",  // by default enabled, and the id will be same with the label.\n              ]\n\nif (! is_default ( \"default\" )) {\n\nreturn ;\n\n}\n\nif (! is_default ( \"default\" )) {\n\nreturn ;\n\n}\n\nif (! is_default ( \"default\" )) {\n\nreturn ;\n"
    },
    {
        "question": "What is id?",
        "answer": "What is id? \"Sign out\",  // by default enabled, and the id will be same with the label.\n              ]\n\nif (! id ) {\n\nreturn ;\n\n}\n\nif (! id ) {\n\nreturn ;\n\n}\n\nif (! id ) {\n\nreturn ;\n\n}\n\nif (! id ) {\n\nreturn ;\n\n}\n"
    },
    {
        "question": "What is label.?",
        "answer": "What is label.? \"Sign out\",  // by default enabled, and the id will be same with the label.\n              ]\n\nThe label is a string that contains the name of the label.\n\nThe label is a string that contains the name of the label.\n\nThe label is a string that contains the name of the label.\n\nThe label is a string that contains the name of the label.\n"
    },
    {
        "question": "What is ]?",
        "answer": "What is ]? \"Sign out\",  // by default enabled, and the id will be same with the label.\n              ]? \"Sign out\",  // by default disabled, and the id will be same with the label.\n                                       "
    },
    {
        "question": "What is panel2?",
        "answer": "What is panel2? },\n          \"panel2\": {..}\n      },\n      commands: {\n          \"command1\": {\n              run() {..},\n              cancel() {..}\n          },\n          \"command2\": function(){..}\n      }\n  });\n"
    },
    {
        "question": "What is commands?",
        "answer": "What is commands? },\n          \"panel2\": {..}\n      },\n      commands: {\n          \"command1\": {\n              run() {..},\n              cancel() {..}\n          },\n          \"command2\": function(){..}\n      }\n  });\n"
    },
    {
        "question": "What is command1?",
        "answer": "What is command1? },\n          \"panel2\": {..}\n      },\n      commands: {\n          \"command1\": {\n              run() {..},\n              cancel() {..}\n          },\n          \"command2\": function(){..}\n      }\n  });\n"
    },
    {
        "question": "What is command2?",
        "answer": "What is command2? },\n          \"panel2\": {..}\n      },\n      commands: {\n          \"command1\": {\n              run() {..},\n              cancel() {..}\n          },\n          \"command2\": function(){..}\n      }\n  });\n"
    },
    {
        "question": "What is function?",
        "answer": "What is function? },\n          \"panel2\": {..}\n      },\n      commands: {\n          \"command1\": {\n              run() {..},\n              cancel() {..}\n          },\n          \"command2\": function(){..}\n      }\n  });\n"
    },
    {
        "question": "What is get?",
        "answer": "What is get? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| --- | --- | --- | --- |"
    },
    {
        "question": "What is returns?",
        "answer": "What is returns? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is uxppanelinfo?",
        "answer": "What is uxppanelinfo? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| --- | ---"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| --- | --- | --- | --- |"
    },
    {
        "question": "What is object?",
        "answer": "What is object? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is id?",
        "answer": "What is id? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is null?",
        "answer": "What is null? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is id?",
        "answer": "What is id? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is param?",
        "answer": "What is param? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| param | String | panel id |\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is type?",
        "answer": "What is type? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is description?",
        "answer": "What is description? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is id?",
        "answer": "What is id? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is string?",
        "answer": "What is string? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| --- | --- | --- | --- |"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is panel?",
        "answer": "What is panel? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| --- | --- | --- | --- |"
    },
    {
        "question": "What is id?",
        "answer": "What is id? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is Get?",
        "answer": "Who is Get? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is panel?",
        "answer": "Who is panel? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| --- | --- | --- | --- |"
    },
    {
        "question": "Who is UxpPanelInfo?",
        "answer": "Who is UxpPanelInfo? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| --- | --- | ---"
    },
    {
        "question": "Who is -?",
        "answer": "Who is -? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is Param?",
        "answer": "Who is Param? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| --- | --- | --- | --- |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is Type?",
        "answer": "Who is Type? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is Description?",
        "answer": "Who is Description? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is --?",
        "answer": "Who is --? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is String?",
        "answer": "Who is String? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| --- | --- | --- | --- |"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| id | String | panel id |\n"
    },
    {
        "question": "Who is panel?",
        "answer": "Who is panel? Get panel with specified id Returns: UxpPanelInfo - - panel object for a valid id\n                          null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | panel id |\n\n| --- | --- | --- | --- |\n\n| --- | --- | --- | --- |"
    },
    {
        "question": "What is get?",
        "answer": "What is get? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is command?",
        "answer": "What is command? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is returns?",
        "answer": "What is returns? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is uxpcommandinfo?",
        "answer": "What is uxpcommandinfo? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String"
    },
    {
        "question": "What is command?",
        "answer": "What is command? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is object?",
        "answer": "What is object? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is id?",
        "answer": "What is id? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is null?",
        "answer": "What is null? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is id?",
        "answer": "What is id? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is param?",
        "answer": "What is param? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| param | String | command param"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is type?",
        "answer": "What is type? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is description?",
        "answer": "What is description? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is id?",
        "answer": "What is id? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is string?",
        "answer": "What is string? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is command?",
        "answer": "What is command? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is id?",
        "answer": "What is id? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "What is |?",
        "answer": "What is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is Get?",
        "answer": "Who is Get? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is command?",
        "answer": "Who is command? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is UxpCommandInfo?",
        "answer": "Who is UxpCommandInfo? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String"
    },
    {
        "question": "Who is -?",
        "answer": "Who is -? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is Param?",
        "answer": "Who is Param? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is Type?",
        "answer": "Who is Type? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is Description?",
        "answer": "Who is Description? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is --?",
        "answer": "Who is --? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is String?",
        "answer": "Who is String? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is |?",
        "answer": "Who is |? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    },
    {
        "question": "Who is command?",
        "answer": "Who is command? Get command with specified id Returns: UxpCommandInfo - - command object for a valid id\n                            null for an invalid id | Param | Type | Description |\n| --- | --- | --- |\n| id | String | command id |\n\n| --- | --- | --- | --- |\n\n| id | String | command id"
    }
]